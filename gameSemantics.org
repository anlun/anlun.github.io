#+TITLE: The Game Semantics summer school, August 2016
#+OPTIONS: toc:nil

# #+INFOJS_OPT: view:overview toc:nil mouse:#cccccc ltoc:nil
# #+INFOJS_OPT: view:info toc:nil mouse:#cccccc ltoc:nil
#+INFOJS_OPT: view:showall toc:nil mouse:#cccccc ltoc:nil

#+NAME: macros
#+BEGIN_SRC latex :exports none
  % One needs to update dynamic block after updating the macros.
  % To do this one has to press `C-c C-c` at `block-macro` position.
  \newcommand\semState[2]{âŸ¦#1âŸ§#2}
  \newcommand\angled[1]{\langle #1 \rangle}
  \newcommand\tick{ðŸ˜Œ}
  \newcommand\fail{ðŸ˜’}
  \newcommand\bN{\mathbb{N}}
#+END_SRC
#+BEGIN: block-macro
#+BEGIN_HTML
\(
  % One needs to update dynamic block after updating the macros.
  % To do this one has to press `C-c C-c` at `block-macro` position.
  \newcommand\semState[2]{âŸ¦#1âŸ§#2}
  \newcommand\angled[1]{\langle #1 \rangle}
  \newcommand\tick{ðŸ˜Œ}
  \newcommand\fail{ðŸ˜’}
  \newcommand\bN{\mathbb{N}}
\)
#+END_HTML
#+LATEX_HEADER:   % One needs to update dynamic block after updating the macros.
#+LATEX_HEADER:   % To do this one has to press `C-c C-c` at `block-macro` position.
#+LATEX_HEADER:   \newcommand\semState[2]{âŸ¦#1âŸ§#2}
#+LATEX_HEADER:   \newcommand\angled[1]{\langle #1 \rangle}
#+LATEX_HEADER:   \newcommand\tick{ðŸ˜Œ}
#+LATEX_HEADER:   \newcommand\fail{ðŸ˜’}
#+LATEX_HEADER:   \newcommand\bN{\mathbb{N}}
#+LATEX_HEADER: 
#+END:

Notes on the game semantics summer school taught by Dan R. Ghica, [[www.cs.bham.ac.uk/~drg/]].

#+BEGIN_HTML
This page is interactive. To unfold/fold a section press on its header.
#+END_HTML

* References
- Ghica & McCusker ICALP 2000, TCS 2003
- Abramsky, Ghicka, Murawski, Ong TACAS 2004
- Ghica, Murawski, Ong ICALP 2004, TCS 2006
- Ghica POPL 2007
- Ghica, Smith POPL 2011
- Ghica, Singh, Smith ICFP 2011
- Ghica & al DATE 2015, FPGA 2015
* Day
** Applied simply typed *call-by-name* \lambda calculus
   We can do the same for /call-by-value/, but it's harder from the game semantics
   point of view.
   
  - /Call-By-Name/
    For teaching purpose.
  - \lambda /calculus/
    For high-order functions.
  - /Simply typed/
    For teaching purpose.
  - /Applied/
    For extensions.\\
  
  *Ex:*
  - (classic) \lambda + arithmetic + /if-then-else/ + recursion = PCF
  - (classic) PCF + local state + assignment + deref = (Idealized) Algol
  - (non-classic) I. Algol + concurrency + binary semaphores = I. Concurrent Algol

  We will discuss I. C. Algol.

** Operational Semantics I: Evaluation semantics / Big-step operational semantics
   Here we define an evaluation relation $\Rightarrow$.
*** \lambda-calculus
\begin{array}{l l l}
M & ::= & x \; | \; \lambda x . M \; | \; M \; M'
\end{array}

*Def:* If there is no rule for a term, the term is a /value/.

Here $x$ and $\lambda x . M$ are /values/.
Thus, we can assume that a term is reduced to a value in the rule.

#+attr_html: :width 300px
[[./images/lecture 1_1.jpg]]

\begin{array}{l l l}
PCF & ::= & \dots \; | \; k \; | \; M + M' \; | \; if \; M \; then \; M' \; else \; M'' \; | \; fix
\end{array}

We can add rules to define semantics for $PCF$ in the same style.

The rule for $if-then-else$.

#+attr_html: :width 300px
[[./images/lecture 1_2.jpg]]

The rule for $fix$.
#+attr_html: :width 200px
[[./images/lecture 1_3.jpg]]

The rule doesn't give an intuition how to implement the language.
It's also non-compositional, and it's a problem.

*Problem 1*:
- It is defined by inductive rules $\tick$, but
- It is not defined /compositionally/ $\fail$.

*Problem 2*: It doesn't look like a potential interpreter / compiler $\fail$.
Just a lot of term rewriting.

*Note on Problem 2:* However, it /is/ implementable, but not in a efficient way.

*Advantage:*
- It is usually simpler, clearer and more concise than the alternatives.
- It is god as a /SPEC/.
*** Idealized Algol
    We need state to define the semantics.
    
    *Def:* Configurations $\angled{M , S}$, where $S: L \rightharpoonup \mathbb{Z}$.
**** $PCF$ rules
     $M_1,s \Rightarrow \lambda x.M'_1, s'$

     $M_1'[M_2 / x], s \Rightarrow V$
     
#+attr_html: :width 400px
[[./images/lecture 1_4.jpg]]
     
     Here in the latter rule we introduce fresh location $l$ to avoiding the problem
     with multiple bindings to $x$.
*** Idealized Concurrent Algol
    We add rules for parrallel compositional.
    
#+attr_html: :width 200px
[[./images/lecture 1_5.jpg]]
    
    There is no convient way to define proper interleaving in terms of big-step semantics.
    
    *Problem 3:* The big-step semantics style isn't expressive enough for some features.
    - Paralleliation and concurrency;
    - Control (/e.g./ exceptions).

*** Conclusion
    It's too high-level, and doesn't expressive enough. 

** Operational Semantics II: (Felleisen-style)
   Reduction contexts.

\begin{array}{l l l l}
\lambda: & \epsilon  & ::= & \dots \; | \; [-] \; | \; \epsilon M \; | \; V \epsilon \; (\text{for Call-By-Value}) \\
PCF    : &           & |   & \dots \; | \; if \; \epsilon \; then \; M \; else \; M \; | \; \dots \\
IA     : &           & |   & \dots \; | \; M := \epsilon \; | \; \epsilon := V \; | \; \dots (\text{Configurations + Frame stack Fs (= list of } \epsilon\text{s}) \\
ICA    : &           & |   & \dots \; | \; M || \epsilon \; | \; \epsilon || M \; | \; \dots \\
\end{array}

*** $PCF$ Rules:
    - $\angled{S, M N} \rightarrow \angled{S \circ ([] N), M}$;
    - $\angled{S \circ, \lambda x . M} \rightarrow \angled{S, M[N / x]}$.

    *Note:* \\
    - No assumptions for the rules! $\tick$;
    - It uses substitution. $\fail$ 

*** Idealized Algol Rules:
    - $\angled{\sigma, S \circ ([] := n), \iota} \rightarrow \angled{(\sigma | \iota \mapsto n), S, skip}$, where \\
      - $\sigma : L \rightarrow \mathbb{Z}$ is a local state;
      - $\iota$ is a location;
      - $(\sigma | \iota \mapsto n)(z) = if \; z = \iota \; then \; n \; else \sigma(z)$.

    - $\angled{\sigma, S, M; \; N} \rightarrow \angled{\sigma, S \circ ([]; \; N), M}$.
    - $\angled{\sigma, S \circ ([]; \; N), skip} \rightarrow \angled{\sigma, S, N}$.


    - *Wrong:* $\angled{\sigma, S, new \; x \; in \; M} \rightarrow \angled{\sigma \oplus (\iota \mapsto x), S, M[l/x]}$,\\
      - where $\iota \in dom \; \sigma$.

      *Comments:* Here we leak $\iota$, which becomes garbage. But when we will need to have a garbage collector.
      It's not a big deal, however, we can put something to the stack to erase $\iota$ at the point we won't require $\iota$.

    - *Right:* $\angled{\sigma, S, new \; x \; in \; M} \rightarrow \angled{\sigma \oplus (\iota \mapsto x), S \circ (new \; \iota \; in \; []), M[l/x]}$,\\
      - where $\iota \in dom \; \sigma$.


    - $\angled{\sigma, S \circ (new \; \iota \; in \; []), V} \rightarrow \angled{\sigma \setminus \iota, S, V}$.
    
    *Observation:* Smart vs. Stupid rule. \\
    The latter guarantees safety, but you need to prove safety in the case of the Smart rule.

    *Syntax observation:* All constants can be seen as higher-order constants, having most of statements a syntactic sugar for
    function calls, /i.e./: \\
    - $``M := N" \; = \; ``asg \; M \; N"$;
    - $``new \; x \; in \; M" \; = \; ``new \; (\lambda \; x. M)"$.

*** Idealized Concurrent Algol Rules:
    We add *non-deterministic* rules!
    - $\angled{\sigma, S, M_0 || M_1} \rightarrow \angled{\sigma, S \circ (M_i \; || \; []), M_{i - 1}}$, where $i \in \{0, 1\}$.
    - $\angled{\sigma, S \circ (M_0 \; || \; []), M_1} \rightarrow \angled{\sigma, S \circ (M_1 \; || \; []), M_0}$.

    *Problem:*:
    - We are /not/ guaranteed progress anymore! We can swap threads infinitely;
    - We /lose/ some of the potential for concurrency. /I.e./ we require to have concurrent context on the top of the stack.
    - Any impact on the old rules (esp. /state/).
   
    *Theoretical task:* Proper rules for concurrency here.

** Operational Semantics III: Abstract machines
   *Examples:*
   - SECD / CEK (CBV);
   - Krivine (CBN);
   - ZINC (OCaml).
   
   Such machines are inductively defined /translations/: Syntax $\rightarrow$ Bytecode $\rightarrow$ ASM.
 
** Comments on Operational Semantics
   *Aim 1:* Operational Semantics II $\overset{\text{via Game Semantics}}{\longrightarrow}$ OperationalSemantics III.\\
   *Aim 2:* How do we know that compiler optimizations are correct?
   
   In general PL setting:\\
   1) SPEC $\rightarrow$ COMP (/e.g./ correctly, principled);
   2) Program correctness (/e.g./ compiler optimizations).
   
   *Observation:* In Operational Semantics (I, II, and III) you work with /Programs/ (/i.e./ no free variables) not /Terms/.
   
   *Def:* $P_1 \equiv P_2$ iff $P1 \overset{*}{\rightarrow} V \Leftrightarrow P_2 \overset{*}{\rightarrow} V$.
   - *Observation:* with same further complications for non-determinism.
   
   However, what does it mean for terms to be equivalent? $M \overset{?}{\equiv} N$.\\
   *Ex:* $1 + 1 \equiv 2$, but it doesn't hold for $x - x \overset{?}{\equiv} 0$ (/i.e./ $x$ is a free variable).

   *Def:* $M \equiv N$ iff $\forall C[-] \; (\text{a program with a hole}), C[M] \equiv C[N]$ (as a programs).
   - congruence by definition;
   - super-awkward definition $\fail$;
   - obviously useful for compiler optimizations and front end, /e.g./ constant folding, constant propagation;
   - also generally for correctness $M; \; assert(P) \not \equiv fail$.
   - How to make it useful? Check HOOT workshop proceedings.
   
   *Alternative:* Denotational Semantics, $\semState{-}{}: Terms \rightarrow Mathy \; Universe$.\\
   When $M \equiv N \Leftrightarrow \semState{M}{} = \semState{N}{}$, where we can check objects on equality.\\
   If there is such a propertry, the semantics is called /fully abstract denotational semantics/.
   - $M \equiv N \Leftarrow \semState{M}{} = \semState{N}{}$ is /soundness/;
   - $M \equiv N \Rightarrow \semState{M}{} = \semState{N}{}$ is /completeness/.
   *Note:* Usually the prove of completeness is harder. The reason is that $Mathy \; Universe$ might be quite bigger than the Term one.
* Day
  [[bit.ly/laudience]], code: 775797 \\
  *To Check:* The Chemical abstract machine style.

   If you want to prove that there is no way to derive $\bot$ in a logic, it's quite hard.
   One way is to define a denotational semantics, /i.e./ using set and other classic stuff, like Tarski did.
** Game semantics + Logics 

\begin{array}{l l l}
P & ::= & a \; | \; true \; | \; false \; | \; P \land Q \; | \; P \lor Q \; | \; \forall x . P \; | \; \exists x . P
\end{array} 

Lorenz & Lorenzen : a /game/ between Verifier and Falsifier. The /game/ is defined by the proposition.


\begin{array}{l l l}
\semState{true}{} & = & \text{V wins} \\
\semState{false}{} & = & \text{F wins} \\
\semState{P_1 \land P_2}{} & = & \text{F chooses on } i \in \{1, 2\} \text{the play in } \semState{P_i}{} \; \text{V} \\
\semState{P_1 \land P_2}{} & = & \text{V chooses on } i \in \{1, 2\} \text{the play in } \semState{P_i}{} \; \text{F} \\
\semState{\forall x. P}{}  & = & \text{F chooses } x \; \text{then play } \semState{P_i}{(u | x \mapsto X)} \\
\semState{\exists x. P}{}  & = & \text{V chooses } x \; \text{then play } \semState{P_i}{(u | x \mapsto X)} \\
\semState{\triangledown x. P}{}  & = & \dots \\
\\
\semState{\lnot P}{} & = & \text{V and F swaps places.}\\
\end{array} 

*To Check:* Hintikka, /Principles of mathematics revisited/.
Hintikka is a philosopher firstly. He says compositionality is wrong (like static analysis vs. denotational semantics).

*** Connection to programming 
    Logic vs. Programming Language --- Curry-Howard correspondence.
    *Ex:*
    \begin{array}{l l}
    Proof & Term \\
    Proposition & Type \\
    A \rightarrow B & A \rightarrow B
    \end{array}
    
    In 90s J.Y.Girard invented/discovered /Linear Logic/. (*Check:* Paul-Andy Melleies tutorial).\\
    /Classical/ logic: (I have 100 rubels) $\land$ (I have 100 rubels) $\leftrightarrow$ (I have 100 rubels). The rule is called weakening The rule is called weakening. \\
    /Linear/ logic: (I have 100 rubels) $\otimes$ (I have 100 rubels) $\leftrightarrow$ (I have 200 rubels). As Linear Logic is a resourse-aware.

    $A \rightarrow B = A \multimap B$, where $!A$ means the proposition is duplicable. \\
    But $\semState{A \multimap B}{} = ?$
    
    Andreas Blass gave Game Semantics for Linear Logic. But it has a problem, as it is not compositional $\fail$.
    And Samson Abramsky and Radha Jagadeesan made it compositional.
    They and Pasquale Malacoria applied it to define the semantics of PCF.
    
** Idea: How to `operational' your denotational semantics
   Language: Serially Reentrant Algol (SRA) (Reynolds's  Syntactic Control functions ??)
   
   \begin{array}{l l l}
   t & ::= & nat \; | \; t \times  t \; | \; t \rightarrow t \\
   \end{array}
   
   $x_1:t_1, \dots, x_n:t_n \vdash M : t$, where
   - $x_1$ --- a variable;
   - $t_1$ --- a type;
   - $M$   --- a term;
   - $t$   --- a type.

*** Typing rules
   <<Pic1>>

   *Axiom*: $\Gamma, x:t \vdash x:t$. /Non-linear/ (discarding is OK).
   
   *Abstraction*:
   (linear ... irrelevant)
   <<Pic2>>
   
   *Constants:*
   - $0, 1, 2, \dots \mathbb{N}$;
   - $+, -, ;, \dots \mathbb{N} \times \mathbb{N} \rightarrow \mathbb{N}$;
   - $ifzero : \mathbb{N} \times \mathbb{N} \times \mathbb{N} \rightarrow \mathbb{N}$;
   - $while  : \mathbb{N} \times \mathbb{N} \rightarrow \mathbb{N}$.

   *Imperative:*
   - $var = \bN \times (\bN \rightarrow \bN)$;
   - $der : var \rightarrow \bN$;
   - $asg : var \times \bN \rightarrow \bN$;
   - $newvar : (var \rightarrow \bN) \times \bN \rightarrow \bN$;
   
   "Object-oriented view" ~ Reynolds.
   
   <<Pic3>>
   
   *Note:* it's quite expressive language.
   
   *Example:*\\
   $\lambda u . FIB$, where $FIB$ is a loop to calculate a Fibonacci number.\\
   $(let \; x \; = \; M \; in \; N) = (\lambda x.N) M$ \\
   ...

   <<Pic4>>
   *Check:* GhicaSmith:POPL'11.

   <<Pic5>>

   - Evaluation semantics for the language is very /easy/ to do, however
   - Denotational semantics is quite /hard/, as there are a number of challenges:
     - $\semState{-}{} : SRA \rightarrow Mathy$ ?
       - $Mathy$ is a ``Domain", as in Domain-theory.
     - Imperative / local variables
     - Weird types
     - Iterations
   
   Denotational semantics is all about characterizing for a term interacts with a context, $C[M]$.
   
   *Constants*:
   - $7:nat$
   <<Pic6>>

   *Operations*:
   <<Pic7>>
   
   Here is why Game Semantics provides so precise way to model a semantics of a language.

   <<Pic8>>
   
   *Exercise:* $ifz : \bN \times \bN \times \bN \rightarrow \bN$:
   <<Pic9>>

   <<Pic10>>

   *Exercise:* $while : \bN \times \bN \rightarrow \bN$:
   The picture is wrong: <<Pic11>>
   
   $while : \bN_3 \times \bN_2 \rightarrow \bN_1$: $q_{<1>} (q_{<3>}; \underset{u \in \bN, u \not = 0}{\Sigma} u_{<3>}; q_{<2>}; \underset{u \in \bN}{\Sigma} u_{<2>})^* 0_{<1>}$
   
   *Observation:* All iteractions for all constants can ber represented as regular expressions (over a finite $\bN$).\\
   *Structural rules:* $\semState{x_1:t_1, \dots, x_n:t_n \vdash M:t}{}$ is an /interaction/ (set of sequences) over some alphabet ($\Gamma, t$).

   $A\semState{nat}{} = \angled{\{ Q^a, 0^a, 1^a, 2^a, \dots \}, \{Q\} \times \bN, \{(Q \mapsto 0), (0 \mapsto P, 1 \mapsto P, \dots \}}$, where
   - $A$ is an /arena/;
   - $\{Q\} \times \bN$, justification = basic causality;
   - polarity;
   - $\lambda Q = 0, \lambda n = P$ is a ``labelling".
   
   $A\semState{t_1 \times t_2}{} = \angled{M_1 \disjointcup M_2, J_1 \disjointcup J_2, P_1 \disjointcup P_2}
   - $M_1 \disjointcup M_2$ --- ...;
   - $J_1 \disjointcup J_2$ --- justification relation;
   - $P_1 \disjointcup P_2$ --- labelling function. 
     
   $A\semState{nat \times nat}{} = \angled{\{Q^a, Q^b,0^a,0^b, \dots\} \dots}$
   - Initial moves = moves with justification, /e.g./ $I_{\semState{nat}{}} = \{Q\}$

   $A\semState{t_1 \rightarrow t_2}{} = \angled{M_1 \disjointcup M_2, (I_1 \times I_2) \disjointcup J_1 \disjointcup J_2, P_1^* \disjointcup P_2}, where
   - $P_1^*$ --- reverse O/P polarity.

   $A\semState{x_1:t_1, \dots, x_n:t_n \vdash M:t}{} = A\semState{t_1 \times \dots \times t_n \rightarrow t}{}$.
   

   *Axiom:* $\semState{\Gamma, x:t \vdash x:t}{} = \Gamma \times t \rightarrow t$
   <<Pic11>>
   
   *Rule of the initial move:*
   - always from the Opponent;
   - not justified;
   /I.e./ it's in $I$, the initial move set.

   *Rule of justification:*
   - any subsequent move must be /justified/ by a previous move.
   
   *Application:* $\semState{\Gamma,\triangle \vdash F M: t}{} = \semState{\Gamma \vdash F : t' \rightarrow t}{} \bigdot \semState{\traingle \vdash M : t'}{}$
   <<Pic12>>
